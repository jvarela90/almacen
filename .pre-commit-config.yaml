# Pre-commit Configuration - AlmacénPro v2.0 (Actualizado)
# Automatiza formateo de código y verificaciones de calidad con las últimas versiones

repos:
  # ============================================================================
  # FORMATEO DE CÓDIGO - BLACK (PRIORITARIO)
  # ============================================================================
  - repo: https://github.com/psf/black
    rev: 24.10.0
    hooks:
      - id: black
        name: "Black - Formateo automático de código"
        language_version: python3
        args: [--line-length=100]
        types: [python]

  # ============================================================================
  # ORDENAMIENTO DE IMPORTS - ISORT (COMPATIBLE CON BLACK)
  # ============================================================================
  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        name: "isort - Ordenamiento de imports"
        args: [--profile=black, --line-length=100]
        types: [python]

  # ============================================================================
  # ANÁLISIS ESTÁTICO - FLAKE8 (PERSONALIZADO PARA ERP)
  # ============================================================================
  - repo: https://github.com/pycqa/flake8
    rev: 7.1.1
    hooks:
      - id: flake8
        name: "Flake8 - Verificación de calidad de código"
        args:
          - --max-line-length=100
          - --extend-ignore=E203,W503,E501,D100,D101,D102,D103
          - --exclude=venv,env,.venv,.env,__pycache__,migrations/versions,*.ui
          - --max-complexity=12
          - --select=E,W,F,C
        types: [python]
        additional_dependencies:
          - flake8-bugbear>=23.9.16
          - flake8-comprehensions>=3.14.0
          - flake8-simplify>=0.21.0

  # ============================================================================
  # VERIFICACIONES BÁSICAS DE ARCHIVOS
  # ============================================================================
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.6.0
    hooks:
      - id: trailing-whitespace
        name: "Eliminar espacios en blanco al final"
        exclude: \.db$|\.sqlite$|\.ui$
        
      - id: end-of-file-fixer
        name: "Asegurar línea final en archivos"
        exclude: \.db$|\.sqlite$|\.ui$
        
      - id: check-yaml
        name: "Verificar sintaxis YAML"
        
      - id: check-json
        name: "Verificar sintaxis JSON"
        exclude: \.vscode/|config\.json
        
      - id: check-toml
        name: "Verificar sintaxis TOML"
        
      - id: check-merge-conflict
        name: "Verificar marcadores de conflicto de merge"
        
      - id: check-added-large-files
        name: "Verificar archivos grandes (>500kb)"
        args: [--maxkb=500]
        
      - id: check-case-conflict
        name: "Verificar conflictos mayús/minús"
        
      - id: check-docstring-first
        name: "Verificar docstring al inicio"
        
      - id: debug-statements
        name: "Detectar declaraciones de debug"
        
      - id: mixed-line-ending
        name: "Normalizar terminaciones de línea"
        args: [--fix=lf]

  # ============================================================================
  # SEGURIDAD - BANDIT (ESPECÍFICO PARA ERP)
  # ============================================================================
  - repo: https://github.com/pycqa/bandit
    rev: 1.7.9
    hooks:
      - id: bandit
        name: "Bandit - Análisis de seguridad"
        args:
          - --config=pyproject.toml
          - --recursive
          - --format=custom
          - --skip=B101,B601,B701  # Skip assert, shell, request without timeout
        additional_dependencies: [bandit[toml]]
        exclude: ^(tests/|test_.*\.py$|.*_test\.py$)

  # ============================================================================
  # VERIFICACIONES PYTHON AVANZADAS
  # ============================================================================
  - repo: https://github.com/pre-commit/pygrep-hooks
    rev: v1.10.0
    hooks:
      - id: python-check-blanket-noqa
        name: "Verificar uso específico de # noqa"
        
      - id: python-no-eval
        name: "Prohibir uso de eval()"
        
      - id: python-no-log-warn
        name: "Usar logging.warning en lugar de warn"

  # ============================================================================
  # OPTIMIZACIÓN DE CÓDIGO
  # ============================================================================
  - repo: https://github.com/pycqa/autoflake
    rev: v2.3.1
    hooks:
      - id: autoflake
        name: "Autoflake - Remover imports no utilizados"
        args:
          - --in-place
          - --remove-all-unused-imports
          - --remove-unused-variables
          - --remove-duplicate-keys
          - --ignore-init-module-imports

  # ============================================================================
  # ACTUALIZACIÓN DE SINTAXIS PYTHON
  # ============================================================================
  - repo: https://github.com/asottile/pyupgrade
    rev: v3.17.0
    hooks:
      - id: pyupgrade
        name: "pyupgrade - Modernizar sintaxis Python"
        args: [--py38-plus]

  # ============================================================================
  # TYPE CHECKING - MYPY (OPCIONAL PERO RECOMENDADO)
  # ============================================================================
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.11.2
    hooks:
      - id: mypy
        name: "MyPy - Verificación de tipos"
        args: [--config-file=pyproject.toml, --ignore-missing-imports]
        additional_dependencies:
          - types-python-dateutil
          - types-requests
          - types-PyYAML
        exclude: ^(migrations/versions/|tests/|ui/|.*_test\.py$)

# ============================================================================
# CONFIGURACIÓN GLOBAL PRE-COMMIT
# ============================================================================
default_stages: [commit]
default_language_version:
  python: python3.8

# Configuración CI (pre-commit.ci)
ci:
  autofix_commit_msg: |
    🎨 [pre-commit.ci] Correcciones automáticas de código
    
    Aplicadas automáticamente por pre-commit.ci:
    - Black: formateo de código
    - isort: ordenamiento de imports
    - autoflake: limpieza de imports no utilizados
    - Corrección de espacios y líneas finales
  autofix_prs: true
  autoupdate_branch: main
  autoupdate_commit_msg: "⬆️ [pre-commit.ci] Actualización automática de hooks"
  autoupdate_schedule: weekly
  skip: [bandit, mypy]  # Hooks pesados para CI, ejecutar localmente
  submodules: false

# ============================================================================
# COMANDOS DE USO
# ============================================================================
#
# INSTALACIÓN INICIAL:
# pip install pre-commit
# pre-commit install
# pre-commit install --hook-type pre-push  # Opcional para hooks en push
#
# EJECUCIÓN MANUAL:
# pre-commit run --all-files              # Ejecutar todos los hooks
# pre-commit run black                     # Ejecutar solo Black
# pre-commit run --files main.py          # Ejecutar solo en archivos específicos
#
# MANTENIMIENTO:
# pre-commit autoupdate                    # Actualizar versiones de hooks
# pre-commit clean                         # Limpiar cache
#
# OMITIR CHECKS (solo en emergencias):
# git commit -m "mensaje" --no-verify     # Omitir todos los hooks
# SKIP=flake8 git commit -m "mensaje"      # Omitir hook específico
#
# ============================================================================