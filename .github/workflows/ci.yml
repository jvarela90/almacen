name: CI/CD Pipeline - AlmacénPro v2.0

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 6 AM UTC
    - cron: '0 6 * * *'

env:
  PYTHON_VERSION: '3.8'
  
jobs:
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-lint-${{ hashFiles('requirements.txt', 'pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-lint-
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install black isort flake8 mypy bandit
        
    - name: Run Black (code formatting)
      run: |
        black --check --diff .
        
    - name: Run isort (import sorting)
      run: |
        isort --check-only --diff .
        
    - name: Run flake8 (linting)
      run: |
        flake8 --statistics --count --show-source .
        
    - name: Run mypy (type checking)
      run: |
        mypy --config-file pyproject.toml managers/ controllers/ models/ utils/ config/
        
    - name: Run bandit (security)
      run: |
        bandit -r -c pyproject.toml managers/ controllers/ models/ utils/ config/

  test:
    name: Tests
    needs: lint
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']
      fail-fast: false
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Setup Qt (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y qt5-default libqt5gui5 libqt5widgets5 libqt5core5a qttools5-dev-tools
        export QT_QPA_PLATFORM=offscreen
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('requirements.txt', 'pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.python-version }}-pip-
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-qt pytest-cov pytest-mock
        
    - name: Create test environment file
      run: |
        cat > .env << EOF
        DATABASE_TYPE=sqlite
        SQLITE_PATH=test_almacen_pro.db
        SECRET_KEY=test-secret-key-for-ci
        DEBUG=true
        LOG_LEVEL=DEBUG
        ENABLE_SQL_LOGGING=false
        EOF
        
    - name: Run migration tests
      run: |
        python test_migrations_simple.py
        
    - name: Run unit tests
      env:
        QT_QPA_PLATFORM: offscreen
      run: |
        python -m pytest tests/ -v --cov=managers --cov=controllers --cov=models --cov=utils --cov-report=xml --cov-report=term-missing
        
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.8'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  integration-tests:
    name: Integration Tests
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Setup Qt
      run: |
        sudo apt-get update
        sudo apt-get install -y qt5-default libqt5gui5 libqt5widgets5 libqt5core5a qttools5-dev-tools
        export QT_QPA_PLATFORM=offscreen
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-qt
        
    - name: Create integration test environment
      run: |
        cat > .env << EOF
        DATABASE_TYPE=sqlite
        SQLITE_PATH=integration_test_almacen_pro.db
        SECRET_KEY=integration-test-secret-key
        DEBUG=true
        LOG_LEVEL=INFO
        EOF
        
    - name: Run integration tests
      env:
        QT_QPA_PLATFORM: offscreen
      run: |
        python -m pytest tests/ -m "integration" -v --tb=short
        
    - name: Cleanup test databases
      if: always()
      run: |
        rm -f test_almacen_pro.db integration_test_almacen_pro.db *.db-wal *.db-shm

  migration-tests:
    name: Database Migration Tests
    needs: lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install alembic SQLAlchemy python-dotenv
        
    - name: Test migrations up and down
      run: |
        export DATABASE_TYPE=sqlite
        export SQLITE_PATH=migration_test.db
        python database/migrate.py init
        python database/migrate.py upgrade head
        python database/migrate.py downgrade 001
        python database/migrate.py upgrade head
        python database/migrate.py current
        
    - name: Cleanup
      if: always()
      run: |
        rm -f migration_test.db*

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml] safety
        
    - name: Run Bandit security scan
      run: |
        bandit -r -c pyproject.toml -f json -o bandit-report.json .
        
    - name: Run Safety dependency check
      run: |
        pip install -r requirements.txt
        safety check --json --output safety-report.json || true
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  build:
    name: Build Application
    needs: [test, migration-tests]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Setup Qt (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y qt5-default libqt5gui5 libqt5widgets5
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install PyInstaller
        
    - name: Create production environment file
      run: |
        cat > .env << EOF
        DATABASE_TYPE=sqlite
        SQLITE_PATH=data/almacen_pro.db
        SECRET_KEY=production-will-be-generated
        DEBUG=false
        LOG_LEVEL=INFO
        EOF
        
    - name: Build application with PyInstaller
      run: |
        pyinstaller --onefile --windowed --name "AlmacenPro-v2.0" main.py
        
    - name: Test built application (basic)
      run: |
        # Basic smoke test - just try to import
        python -c "import main; print('Build successful')"
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: almacen-pro-${{ matrix.os }}
        path: dist/

  deploy-staging:
    name: Deploy to Staging
    needs: [build, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: almacen-pro-ubuntu-latest
        path: ./dist/
        
    - name: Deploy to staging environment
      run: |
        echo "Deploying to staging environment..."
        echo "Application version: $(date +%Y.%m.%d)-$(git rev-parse --short HEAD)"
        # Here would go actual deployment commands
        
    - name: Run staging tests
      run: |
        echo "Running staging environment tests..."
        # Here would go staging tests

  release:
    name: Create Release
    needs: [build, security, integration-tests]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all build artifacts
      uses: actions/download-artifact@v3
      
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: AlmacénPro v${{ github.ref }}
        body: |
          ## AlmacénPro v2.0 Release
          
          ### Changes in this Release
          - Complete MVC architecture implementation
          - Qt Designer UI migration
          - Alembic database migrations
          - Enhanced security and validation
          - Comprehensive CI/CD pipeline
          
          ### Installation
          1. Download the appropriate binary for your OS
          2. Extract and run the executable
          3. Follow the setup wizard
          
          ### System Requirements
          - Windows 10+, macOS 10.15+, or Ubuntu 20.04+
          - 4GB RAM minimum, 8GB recommended
          - 2GB free disk space
          
        draft: false
        prerelease: false
        
    - name: Upload Release Assets
      run: |
        for file in dist/*; do
          echo "Uploading $file"
          # Upload each platform binary
        done