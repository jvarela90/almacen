name: CI/CD Pipeline - AlmacÃ©nPro v2.0

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.8'
  
jobs:
  quality-check:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Create test environment
      run: |
        cat > .env << EOF
        DATABASE_TYPE=sqlite
        SQLITE_PATH=test_almacen_pro.db
        SECRET_KEY=test-secret-for-ci
        DEBUG=true
        LOG_LEVEL=DEBUG
        # Company info
        COMPANY_NAME=Test Company
        COMPANY_ADDRESS=123 Test St
        COMPANY_PHONE=+1234567890
        COMPANY_EMAIL=test@company.com
        # Security
        SESSION_TIMEOUT_MINUTES=30
        PASSWORD_MIN_LENGTH=6
        MAX_LOGIN_ATTEMPTS=3
        EOF
        
    - name: Run Black (code formatting check)
      run: |
        black --check --diff .
        
    - name: Run isort (import sorting check)  
      run: |
        isort --check-only --diff .
        
    - name: Run Flake8 (linting)
      run: |
        flake8 --max-line-length=100 --exclude=venv,__pycache__,migrations/versions --statistics
        
    - name: Run Bandit (security check)
      run: |
        bandit -r . -x venv,tests -f json || true
        bandit -r . -x venv,tests --severity-level medium

  test:
    name: Run Tests
    needs: quality-check
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']
      fail-fast: false
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Setup Qt (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y qt5-default libqt5gui5 libqt5widgets5 libqt5core5a
        export QT_QPA_PLATFORM=offscreen
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Create test environment
      run: |
        echo "DATABASE_TYPE=sqlite" > .env
        echo "SQLITE_PATH=test_almacen_pro.db" >> .env
        echo "SECRET_KEY=test-secret-for-ci" >> .env
        echo "DEBUG=true" >> .env
        echo "LOG_LEVEL=DEBUG" >> .env
        echo "COMPANY_NAME=Test Company" >> .env
        echo "SESSION_TIMEOUT_MINUTES=30" >> .env
        echo "PASSWORD_MIN_LENGTH=6" >> .env
        echo "MAX_LOGIN_ATTEMPTS=3" >> .env
        
    - name: Run database migrations test
      run: |
        python database/migrate.py upgrade
        python database/migrate.py current
        
    - name: Run pytest
      env:
        QT_QPA_PLATFORM: offscreen
      run: |
        pytest tests/ -v --cov=managers --cov=controllers --cov=models --cov=utils --cov-report=xml --cov-report=term-missing
        
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.8'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        
    - name: Cleanup test files
      if: always()
      run: |
        rm -f test_almacen_pro.db* || true

  integration-test:
    name: Integration Tests
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Setup Qt
      run: |
        sudo apt-get update
        sudo apt-get install -y qt5-default libqt5gui5 libqt5widgets5 libqt5core5a
        export QT_QPA_PLATFORM=offscreen
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Create integration test environment
      run: |
        cat > .env << EOF
        DATABASE_TYPE=sqlite
        SQLITE_PATH=integration_test.db
        SECRET_KEY=integration-test-secret
        DEBUG=true
        LOG_LEVEL=INFO
        COMPANY_NAME=Integration Test Co
        SESSION_TIMEOUT_MINUTES=30
        PASSWORD_MIN_LENGTH=6
        MAX_LOGIN_ATTEMPTS=3
        EOF
        
    - name: Run integration tests
      env:
        QT_QPA_PLATFORM: offscreen
      run: |
        python -c "
import sys
sys.path.append('.')
from database.manager import DatabaseManager
from managers.user_manager import UserManager
from managers.product_manager import ProductManager

print('Testing database initialization...')
db = DatabaseManager()
print('âœ“ Database initialized')

print('Testing user manager...')
user_mgr = UserManager(db)
print('âœ“ User manager working')

print('Testing product manager...')  
product_mgr = ProductManager(db)
print('âœ“ Product manager working')

print('ðŸŽ‰ Integration tests passed!')
"
        
    - name: Test MVC structure
      env:
        QT_QPA_PLATFORM: offscreen  
      run: |
        python test_mvc_simple.py
        
    - name: Cleanup
      if: always()
      run: |
        rm -f integration_test.db*

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        
    - name: Run Bandit security scan
      run: |
        bandit -r . -x venv,tests -f json -o bandit-report.json || true
        bandit -r . -x venv,tests --severity-level medium
        
    - name: Run Safety check
      run: |
        pip install -r requirements.txt
        safety check || true
        
    - name: Upload security artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: bandit-report.json